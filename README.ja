
* debify: 簡単にアプリケーションファイルをDebian package(.deb)化する

* どういう場合に有益か
  依存管理なんかどうでもいいからとにかくファイルをパッケージマネジャで管理したいとき。
  そのためにチュートリアルとか読んでる暇もない。そういう方へ。

* 例

  * ディレクトリ下の全てをパッケージ化
    $ debify.py pack_dir foo_0.1 '<desc>' /usr/lib/foo --dest=/alt/lib

  * 標準入力に与えたパスからパッケージ化
    $ find /usr/lib/foo | debify.py pack_paths foo_0.1 '<desc>'

  * cpioの出力からパッケージ化
    $ (cd /usr/lib; find foo | cpio -o) | debify.py pack_cpio foo_1.0 '<desc>' --dest==/alt/lib

* motivation
  アプリケーションやライブラリのファイルはパッケージとして管理するにこしたことはない。
  しかし、パッケージを作るのは面倒なんで結局make installしたりcpan hogeとやったりeasy_installしてしまうことになる。
  そうしているとパッケージツールの管理外のパッケージが増えてシステム復元ができないような事態になってしまう。
  コマンド一発でファイルをパッケージ化できればこういうことにならない。

* 目標
  パッケージ作りの抵抗を下げることによりインストールするもの全てをパッケージシステムの管理下におくことを可能にする。
  - システム構成を一つのネームスペース下で管理できる: dpkg -l
  - 削除できるようになる
  - コンポーネントを.debファイルとして管理することによりシステムの復元や複製が確実・効率的にできるようになる

* これから
  アプリケーション毎のインストール方法と連動して自動的にパッケージ化できるようになることを目指す。
  例えば "debify capture foo_0.1 '<desc>' make install"だけでインストールしたものがパッケージ化されるようにする。
  - make install
  - easy_install hoge
  - cpan hoge
  現時点は次のようにインストールされたファイルを洗い出す:

* どうやってインストールされたファイルを洗い出すか
    # まずスナップショットを取る。大抵のプログラムは/usr/下にはいる。 そうでない場合は調整する。
  $ find /usr/ | sort > x.pre
  $ sudo make install          # あるいは easy_install とか cpan など
  $ find /usr/ | sort > x.post
  $ comm -23 x.post x.pre > x.installed-files
    # 変なものが入っていないか確認
  $ less x.installed-files
    # 捕獲
  $ cat x.installed-files | debify.py pack_paths foo_0.1 '<desc>'
    # foo_0.1.debができる。
    # インストールされたイメージを上書きすることにより管理下におく。
  $ sudo dpkg -i foo_0.1.deb
    # 削除して後片付けしてもいい。上で作られた.debファイルを保存しておけば、いつでも再インストールできる。
  $ sudo dpkg -r foo_0.1

  jail/chrootの砂場があれば、ファイルの洗い出しがより迅速に安全にできる。これは別プロジェクトになってしまうが。

